#!/usr/bin/env bash

[[ "$1" = "-x" ]] && set -o xtrace && shift

calling_script="$1"

available_methods() {
    sed -n "s/^function _\(.*\)\b.*{.*/\1/p ; s/^_\(.*\)\b.*{.*/\1/p" "$1"
}

methods=("$(available_methods "$calling_script")")

is_available() {
   [[ "${methods[*]}" =~ (^|[[:space:]])"${1:-}"($|[[:space:]]) ]]
}

if [[ "${2-}" ]] && is_available "$2"; then
  command="$2"
  shift
fi

option() {
  opt="$1"
  [[ "${opt:0:1}" = "-" ]] && opt="${opt:1}"  # support two dashes in front
  echo "_${opt//-/_}=$2"
}

declared_vars=0

while	(( $# )) ; do
  case "$1" in
  -*=*)
    opt_key="${1/=*/}"
    declare "$(option "${opt_key:1}" "${1/*=/}")" || exit 2
    declared_vars=$(( declared_vars + 1 ))
    ;;
  --)
    break
    ;;
  -*)
    declare "$(option "${1:1}" "${2-}")" || exit 2
    declared_vars=$(( declared_vars + 1 ))
    ;;
  *)
    { [[ ! "${2-}" ]] || [[ "${2:0:1}" != '-' ]] ;} && break
    { [[ ! "${command-}" ]] && is_available "$1" ;} && break
    ;;
  esac
  shift
done


# this is the method to print help-message from the given file (and this method) prints the content following the syntax below.
# will replace indices of _PROGRAM with the programs actual name
function _help {  #HELP display this message:\n_PROGRAM help
    program_name=${1##*/}
    sed -n "s/^.*#HELP\\s//p;" < "$1" | sed "s/\\\\n/\n\t/g;s/$/\n/;s/_PROGRAM/$program_name/g"
    sed -n "s/^.*#HELP\\s//p;" < "$2" | sed "s/\\\\n/\n\t/g;s/$/\n/;s/_PROGRAM/$program_name/g"
}

if [[ -z ${command+is set} ]] && is_available "${2-}" ; then
  shift
fi

#Sources the given script and calls the method referenced if it's exported,
# it calls the _help method if variables have been set, or _help|_h have been set or the command help has been called
# default nothing
# shellcheck source=/dev/null
source "$calling_script"
command="${command:-${1-}}"
if is_available "${command:-NoT#AMethod}"; then
    _"$command" "${@:2}"
elif [[ ${_help+is set} ]] || [[ ${_h+is set} ]] || [[ "$*" = *"help"* ]]; then
  _help "$calling_script" "$0"
elif ! (( declared_vars )); then
  _help "$calling_script" "$0"
  exit 127
fi
# the fall-through allow for side-effects from `source $calling_script` if you want to use this with no command,
# for handling variables to a script
